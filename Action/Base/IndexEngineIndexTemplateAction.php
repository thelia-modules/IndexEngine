<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace IndexEngine\Action\Base;

use IndexEngine\Model\Map\IndexEngineIndexTemplateTableMap;
use IndexEngine\Event\IndexEngineIndexTemplateEvent;
use IndexEngine\Event\IndexEngineIndexTemplateEvents;
use IndexEngine\Model\IndexEngineIndexTemplateQuery;
use IndexEngine\Model\IndexEngineIndexTemplate;
use Thelia\Action\BaseAction;
use Thelia\Core\Event\ToggleVisibilityEvent;
use Thelia\Core\Event\UpdatePositionEvent;
use Propel\Runtime\Propel;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Thelia\Core\Event\TheliaEvents;
use \Thelia\Core\Event\TheliaFormEvent;

/**
 * Class IndexEngineIndexTemplateAction
 * @package IndexEngine\Action
 * @author TheliaStudio
 */
class IndexEngineIndexTemplateAction extends BaseAction implements EventSubscriberInterface
{
    public function create(IndexEngineIndexTemplateEvent $event)
    {
        $this->createOrUpdate($event, new IndexEngineIndexTemplate());
    }

    public function update(IndexEngineIndexTemplateEvent $event)
    {
        $model = $this->getIndexEngineIndexTemplate($event);

        $this->createOrUpdate($event, $model);
    }

    public function delete(IndexEngineIndexTemplateEvent $event)
    {
        $this->getIndexEngineIndexTemplate($event)->delete();
    }

    protected function createOrUpdate(IndexEngineIndexTemplateEvent $event, IndexEngineIndexTemplate $model)
    {
        $con = Propel::getConnection(IndexEngineIndexTemplateTableMap::DATABASE_NAME);
        $con->beginTransaction();

        try {
            if (null !== $id = $event->getId()) {
                $model->setId($id);
            }

            if (null !== $visible = $event->getVisible()) {
                $model->setVisible($visible);
            }

            if (null !== $code = $event->getCode()) {
                $model->setCode($code);
            }

            if (null !== $title = $event->getTitle()) {
                $model->setTitle($title);
            }

            if (null !== $entity = $event->getEntity()) {
                $model->setEntity($entity);
            }

            if (null !== $serializedColumns = $event->getSerializedColumns()) {
                $model->setSerializedColumns($serializedColumns);
            }

            if (null !== $serializedCondition = $event->getSerializedCondition()) {
                $model->setSerializedCondition($serializedCondition);
            }

            if (null !== $indexEngineDriverConfigurationId = $event->getIndexEngineDriverConfigurationId()) {
                $model->setIndexEngineDriverConfigurationId($indexEngineDriverConfigurationId);
            }

            $model->save($con);

            $con->commit();
        } catch (\Exception $e) {
            $con->rollback();

            throw $e;
        }

        $event->setIndexEngineIndexTemplate($model);
    }

    protected function getIndexEngineIndexTemplate(IndexEngineIndexTemplateEvent $event)
    {
        $model = IndexEngineIndexTemplateQuery::create()->findPk($event->getId());

        if (null === $model) {
            throw new \RuntimeException(sprintf(
                "The 'index_engine_index_template' id '%d' doesn't exist",
                $event->getId()
            ));
        }

        return $model;
    }

    public function toggleVisibility(ToggleVisibilityEvent $event)
    {
        $this->genericToggleVisibility(new IndexEngineIndexTemplateQuery(), $event);
    }

    public function beforeCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function beforeUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterCreateFormBuild(TheliaFormEvent $event)
    {
    }

    public function afterUpdateFormBuild(TheliaFormEvent $event)
    {
    }

    /**
     * Returns an array of event names this subscriber wants to listen to.
     *
     * The array keys are event names and the value can be:
     *
     *  * The method name to call (priority defaults to 0)
     *  * An array composed of the method name to call and the priority
     *  * An array of arrays composed of the method names to call and respective
     *    priorities, or 0 if unset
     *
     * For instance:
     *
     *  * array('eventName' => 'methodName')
     *  * array('eventName' => array('methodName', $priority))
     *  * array('eventName' => array(array('methodName1', $priority), array('methodName2'))
     *
     * @return array The event names to listen to
     *
     * @api
     */
    public static function getSubscribedEvents()
    {
        return array(
            IndexEngineIndexTemplateEvents::CREATE => array("create", 128),
            IndexEngineIndexTemplateEvents::UPDATE => array("update", 128),
            IndexEngineIndexTemplateEvents::DELETE => array("delete", 128),
            IndexEngineIndexTemplateEvents::TOGGLE_VISIBILITY => array("toggleVisibility", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".index_engine_index_template_create" => array("beforeCreateFormBuild", 128),
            TheliaEvents::FORM_BEFORE_BUILD . ".index_engine_index_template_update" => array("beforeUpdateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".index_engine_index_template_create" => array("afterCreateFormBuild", 128),
            TheliaEvents::FORM_AFTER_BUILD . ".index_engine_index_template_update" => array("afterUpdateFormBuild", 128),
        );
    }
}
