<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace IndexEngine\Form;

use IndexEngine\Form\Base\IndexEngineIndexCreateForm as BaseIndexEngineIndexCreateForm;
use IndexEngine\IndexEngine;
use IndexEngine\Model\IndexEngineIndexQuery;
use Symfony\Component\Validator\Constraints\Callback;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\ExecutionContextInterface;

/**
 * Class IndexEngineIndexCreateForm
 * @package IndexEngine\Form
 */
class IndexEngineIndexCreateForm extends BaseIndexEngineIndexCreateForm
{
    public function getTranslationKeys()
    {
        return array(
            "visible" => "Is the index active ?",
            "code" => "Code",
            "title" => "Title",
            "index_engine_driver_configuration_id" => "Driver configuration",
        );
    }

    protected function addCodeField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("code", "text", array(
            "label" => $this->translator->trans($this->readKey("code", $translationKeys), [], IndexEngine::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("code", $fieldsIdKeys)],
            "required" => true,
            "constraints" => array(
                new NotBlank(),
                new Callback([
                    "methods" => [
                        [$this, "checkDuplicateCode"],
                    ]
                ])
            ),
            "attr" => array(
            )
        ));
    }

    public function checkDuplicateCode($value, ExecutionContextInterface $context)
    {
        if (null !== IndexEngineIndexQuery::create()->findOneByCode($value)) {
            $context->addViolation(
                $this->translator->trans("The code %code already exists", ["%code" => $value], IndexEngine::MESSAGE_DOMAIN)
            );
        }
    }

    protected function addIndexEngineDriverConfigurationIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("index_engine_driver_configuration_id", "index_engine_driver_configuration_id", array(
            "label" => $this->translator->trans($this->readKey("index_engine_driver_configuration_id", $translationKeys), [], IndexEngine::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("index_engine_driver_configuration_id", $fieldsIdKeys)],
        ));
    }

    // Fields that we don't need
    protected function addSerializedColumnsField(array $translationKeys, array $fieldsIdKeys)
    {
    }

    protected function addSerializedConditionField(array $translationKeys, array $fieldsIdKeys)
    {
    }

    protected function addEntityField(array $translationKeys, array $fieldsIdKeys)
    {
    }

    protected function addTypeField(array $translationKeys, array $fieldsIdKeys)
    {
    }
}
